services:
  postgres:
    image: postgres:16-alpine
    container_name: hypercommit-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=hypercommit
      - POSTGRES_USER=hypercommit
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - hypercommit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hypercommit"]
      interval: 10s
      timeout: 5s
      retries: 5

  hypercommit:
    image: hypercommit/hypercommit:latest
    container_name: hypercommit
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - DATABASE_URL=postgresql://hypercommit:${POSTGRES_PASSWORD}@postgres:5432/hypercommit
    env_file:
      - .env
    volumes:
      - git-repos:/data/repositories
    networks:
      - hypercommit-network
    depends_on:
      postgres:
        condition: service_healthy

  caddy:
    image: caddy:2-alpine
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp" # HTTP/3
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
    networks:
      - hypercommit-network

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=10 # Check every 10 seconds
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL:-}
    command: hypercommit # Only monitor hypercommit container

networks:
  hypercommit-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  git-repos:
    driver: local
  caddy-data:
    driver: local
  caddy-config:
    driver: local
